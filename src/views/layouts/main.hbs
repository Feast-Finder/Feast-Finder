{{>head}}
{{>nav}}
<script src="/socket.io/socket.io.js"></script>
{{{body}}}

<!-- Invitation Modal (triggered on any page) -->
<div class="modal fade" id="inviteModal" tabindex="-1" aria-labelledby="inviteModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="inviteModalLabel">Swipe Session Invite</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        A friend invited you to join a swiping session.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" id="joinSwipeBtn">Join Swiping</button>
      </div>
    </div>
  </div>
</div>

<script>
  const USER_ID = {{#if user}}{{user.user_id}}{{else}}null{{/if}};
  const socket = io();

  socket.on('connect', () => {
    socket.emit('register-user', { userId: USER_ID });
    socket.emit('ready-for-invites', { userId: USER_ID });

  });


socket.on('invite-user-to-session', async ({ groupId, lat, lng, types }) => {
  const redirected = sessionStorage.getItem('redirectedFromInvite');

  // üõë Don't show modal if already accepted
  if (redirected === 'accepted') return;

  try {
    const res = await fetch(`/session/status?groupId=${groupId}`);
    const data = await res.json();
    if (data.cancelled) return;

    sessionStorage.setItem('invitePayload', JSON.stringify({ groupId, lat, lng, types }));
    sessionStorage.setItem('redirectedFromInvite', 'pending'); // Mark pending only

    const modalEl = document.getElementById('inviteModal');
    const joinBtn = document.getElementById('joinSwipeBtn');
    if (!modalEl || !joinBtn) return;

    const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
    modal.show();

    joinBtn.onclick = () => {
      // ‚úÖ Set flag before redirecting
      sessionStorage.setItem('redirectedFromInvite', 'accepted');
      modal.hide();
      document.body.classList.remove('modal-open');
      document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());

      // ‚úÖ Redirect to restore swiping session
      window.location.href = '/home';
    };
  } catch (err) {
    console.error('‚ùå Failed Redis check in invite-user-to-session:', err);
  }
});

socket.on('swipe-session-cancelled', ({ groupId }) => {
  console.log('‚ùå Session was cancelled for group:', groupId);

  // Clear invite data
  sessionStorage.removeItem('invitePayload');
  sessionStorage.removeItem('redirectedFromInvite');

  inviteState = {
    groupId: null,
    lat: null,
    lng: null,
    types: [],
    isSender: false
  };

  // Hide invite modal
  const modalEl = document.getElementById('inviteModal');
  if (modalEl) {
    const modal = bootstrap.Modal.getInstance(modalEl);
    modal.hide();
  }
  const modalE = document.getElementById('waitingOverlay');
  if (modalE) {
    const modal = bootstrap.Modal.getInstance(modalE);
    modal.hide();
  }
 
sessionStorage.setItem('redirectedFromInvite', 'cancelled');

  disableSwipingUI();
});

</script>




{{>footer}}
