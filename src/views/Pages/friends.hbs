{{#> layout name="main" }}
<div class="container pt-4">
    <h2 class="mb-4">Friends</h2>

    {{#if error}}
    <div class="alert alert-danger">{{error}}</div>
    {{/if}}

    {{#if success}}
    <div class="alert alert-success">{{success}}</div>
    {{/if}}

    <div class="row">
        <!-- Current Friends -->
        <div class="c mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Your Friends</h5>
                </div>
                <div class="card-body">
                    {{#if friends.length}}
                    <ul class="list-group">
                        {{#each friends}}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>{{this.username}}</span>
                            <button class="btn btn-sm btn-outline-danger remove-friend" data-user-id="{{this.user_id}}">
                                Remove
                            </button>
                        </li>
                        {{/each}}
                    </ul>
                    {{else}}
                    <p class="text-muted">You don't have any friends yet. Send a friend request to get started!</p>
                    {{/if}}
                </div>
            </div>
        </div>

        <!-- Add New Friends -->
        <div class="mb-4 position-relative">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Add Friends</h5>
                </div>
                <div class="card-body">
                    <input type="text" class="form-control" id="friendSearch"
                        placeholder="Search for friends by username" autocomplete="off" />
                    <ul class="list-group position-absolute w-100 mt-1" id="searchResults" style="z-index: 1000">
                    </ul>
                </div>
            </div>
        </div>
        <!-- Past Sessions -->
        <div class="card shadow">
            <div class="card-header bg-secondary text-white">
                <h3 class="mb-0">Recent Sessions</h3>
            </div>
            <div class="card-body">
                <div class="list-group">
                    <a href="#" class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">Session with JaneSmith, MikeJohnson</h5>
                            <small class="text-muted">2 days ago</small>
                        </div>
                        <p class="mb-1">Matched on: Italian Restaurant</p>
                    </a>

                    <a href="#" class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">Session with MikeJohnson</h5>
                            <small class="text-muted">1 week ago</small>
                        </div>
                        <p class="mb-1">Matched on: Mexican Food Truck</p>
                    </a>
                </div>
            </div>
        </div>

        <script>
            const searchInput = document.getElementById('friendSearch');
            const resultsBox = document.getElementById('searchResults');

            searchInput.addEventListener('input', async () => {
                const query = searchInput.value.trim();
                if (!query) {
                    resultsBox.innerHTML = '';
                    return;
                }

                try {
                    const res = await fetch(`/search-users?q=${encodeURIComponent(query)}`);
                    const users = await res.json();

                    resultsBox.innerHTML = '';

                    if (users.length === 0) {
                        const li = document.createElement('li');
                        li.className = 'list-group-item text-muted';
                        li.textContent = 'No users found';
                        resultsBox.appendChild(li);
                        return;
                    }

                    users.forEach(user => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.innerHTML = `
          <span>${user.username}</span>
          <button class="btn btn-sm btn-outline-primary">Add Friend</button>
        `;

                        li.querySelector('button').addEventListener('click', async () => {
                            const res = await fetch('/send-friend-request', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ friend_id: user.user_id })
                            });

                            if (res.ok) {
                                li.querySelector('button').disabled = true;
                                li.querySelector('button').textContent = 'Added';
                                li.querySelector('button').classList.replace('btn-outline-primary', 'btn-success');
                            } else {
                                li.querySelector('button').textContent = 'Error';
                                li.querySelector('button').classList.replace('btn-outline-primary', 'btn-danger');
                            }
                        });

                        resultsBox.appendChild(li);
                    });
                } catch (error) {
                    console.error('Search error:', error);
                }
            });
            document.addEventListener('click', (event) => {
                const isClickInside = searchInput.contains(event.target) || resultsBox.contains(event.target);
                if (!isClickInside) {
                    resultsBox.innerHTML = '';
                }
            });
            document.querySelectorAll('.remove-friend').forEach(button => {
                button.addEventListener('click', async function () {
                    if (!confirm('Are you sure you want to remove this friend?')) {
                        return;
                    }

                    const userId = this.dataset.userId;

                    try {
                        const response = await fetch('/friends/remove', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ user_id: userId })
                        });

                        const data = await response.json();
                        if (data.success) {
                            alert('Friend removed');
                            window.location.reload();
                        } else {
                            alert('Failed to remove friend: ' + (data.error || 'Unknown error'));
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('An error occurred while removing the friend');
                    }
                });
            });

        </script>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
{{/layout}}