{{#> layout name="main" }}
<div class="container pt-4">
    <h2 class="mb-4">Friends</h2>

    {{#if error}}
    <div class="alert alert-danger">{{error}}</div>
    {{/if}}

    {{#if success}}
    <div class="alert alert-success">{{success}}</div>
    {{/if}}

    <div class="row">
        <!-- Current Friends -->
        <div class="c mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">Your Friends</h5>
                </div>
                <div class="card-body">
                    {{#if friends.length}}
                    <ul class="list-group" id="friendsList">
                        {{#each friends}}
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <a href="#" class="fw-bold text-dark text-decoration-none view-profile"
                                data-user-id="{{this.user_id}}" data-username="{{this.username}}">
                                {{this.username}}
                                {{#if this.active}}
                                <span class="badge bg-success ms-2">Active</span>
                                {{else}}
                                <span class="badge bg-secondary ms-2">Inactive</span>
                                {{/if}}
                            </a>
                            <button class="btn btn-sm btn-danger remove-friend" data-user-id="{{this.user_id}}">
                                Remove
                            </button>
                        </li>
                        {{/each}}
                    </ul>




                    {{else}}
                    <p class="text-muted">You don't have any friends yet. Send a friend request to get started!</p>
                    {{/if}}
                </div>
            </div>
        </div>

        <!-- Add New Friends -->
        <div class="mb-4 position-relative">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="card-title mb-0">Add Friends</h5>
                </div>
                <div class="card-body">
                    <input type="text" class="form-control" id="friendSearch"
                        placeholder="Search for friends by username" autocomplete="off" />
                    <ul class="list-group position-absolute w-100 mt-1" id="searchResults" style="z-index: 1000">
                    </ul>
                </div>
            </div>
        </div>
        <!-- Past Sessions -->
        <div class="card shadow">
            <div class="card-header bg-secondary text-white">
                <h3 class="mb-0">Recent Sessions</h3>
            </div>
            <div class="card-body">
                <div class="list-group">
                    <a href="#" class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">Session with JaneSmith, MikeJohnson</h5>
                            <small class="text-muted">2 days ago</small>
                        </div>
                        <p class="mb-1">Matched on: Italian Restaurant</p>
                    </a>

                    <a href="#" class="list-group-item list-group-item-action">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1">Session with MikeJohnson</h5>
                            <small class="text-muted">1 week ago</small>
                        </div>
                        <p class="mb-1">Matched on: Mexican Food Truck</p>
                    </a>
                </div>
            </div>
        </div>
        <!-- Friend Profile Modal -->
        <div class="modal fade" id="friendProfileModal" tabindex="-1" aria-labelledby="friendModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="friendModalLabel">Friend Profile</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Username:</strong> <span id="modalUsername"></span></p>
                        <!-- Add more info below if needed -->
                        <p><strong>Email:</strong> <span id="modalEmail"></span></p>
                        <p><strong>Joined:</strong> <span id="modalJoined"></span></p>
                        <p><strong>Last Active:</strong> <span id="modalLastActive"></span></p>

                    </div>
                </div>
            </div>
        </div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('friendSearch');
    const resultsBox = document.getElementById('searchResults');
    const friendsList = document.getElementById('friendsList');
    const noFriendsMessage = document.getElementById('noFriendsMessage');

    function attachRemoveFriend(button) {
      if (!button) return;
      button.addEventListener('click', async function () {
        const userId = this.dataset.userId;
        const confirmed = confirm('Are you sure you want to remove this friend?');
        if (!confirmed) return;

        try {
          const res = await fetch('/friends/remove', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ friend_id: userId })
          });

          const result = await res.json();
          if (result.success) {
            this.closest('li').remove();
          } else {
            alert(result.error || 'Failed to remove friend.');
          }
        } catch (err) {
          console.error('Error removing friend:', err);
          alert('Server error');
        }
      });
    }

    function attachProfileModalHandlers() {
      document.querySelectorAll('.view-profile').forEach(link => {
        link.onclick = null; // remove duplicates
        link.addEventListener('click', async (e) => {
          e.preventDefault();

          const userId = link.dataset.userId;

          try {
            const res = await fetch(`/users/${userId}`);
            const user = await res.json();

            document.getElementById('modalUsername').textContent = user.username;
            document.getElementById('modalEmail').textContent = user.email || 'N/A';
            document.getElementById('modalJoined').textContent = new Date(user.created_at).toLocaleDateString();

            const lastActive = user.active
              ? 'Currently Active'
              : (user.last_active_at ? new Date(user.last_active_at).toLocaleString() : 'Unknown');

            document.getElementById('modalLastActive').textContent = lastActive;

            const modal = new bootstrap.Modal(document.getElementById('friendProfileModal'));
            modal.show();
          } catch (err) {
            console.error('Error fetching profile:', err);
            alert('Could not load profile.');
          }
        });
      });
    }

    // Initial handler setup
    document.querySelectorAll('.remove-friend').forEach(attachRemoveFriend);
    attachProfileModalHandlers();

    // Handle friend search
    searchInput.addEventListener('input', async () => {
      const query = searchInput.value.trim();
      if (!query) {
        resultsBox.innerHTML = '';
        return;
      }

      try {
        const res = await fetch(`/search-users?q=${encodeURIComponent(query)}`);
        const users = await res.json();

        resultsBox.innerHTML = '';

        if (users.length === 0) {
          const li = document.createElement('li');
          li.className = 'list-group-item text-muted';
          li.textContent = 'No users found';
          resultsBox.appendChild(li);
          return;
        }

        users.forEach(user => {
          const li = document.createElement('li');
          li.className = 'list-group-item d-flex justify-content-between align-items-center';
          li.innerHTML = `
            <form class="d-flex justify-content-between align-items-center w-100">
              <input type="hidden" name="friend_id" value="${user.user_id}" />
              <span class="me-auto">
                <a href="#" class="view-profile fw-bold text-dark text-decoration-none"
                   data-user-id="${user.user_id}" data-username="${user.username}">
                  ${user.username}
                </a>
                ${user.active 
                  ? '<span class="badge bg-success ms-2">Active</span>' 
                  : '<span class="badge bg-secondary ms-2">Inactive</span>'}
              </span>
              ${user.is_friend 
                ? '<button type="button" class="btn btn-sm btn-outline-secondary ms-2" disabled>Already Friends</button>' 
                : '<button type="button" class="btn btn-sm btn-outline-primary ms-2 add-friend-btn">Add Friend</button>'}
            </form>
          `;

          const addButton = li.querySelector('.add-friend-btn');
          if (addButton) {
            addButton.addEventListener('click', async () => {
              addButton.disabled = true;
              addButton.textContent = 'Adding...';

              try {
                const res = await fetch('/send-friend-request', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ friend_id: user.user_id })
                });

                if (res.ok) {
                  li.remove();
                  noFriendsMessage?.remove();

                  const newFriend = document.createElement('li');
                  newFriend.className = 'list-group-item d-flex justify-content-between align-items-center';
                  newFriend.innerHTML = `
                    <a href="#" class="fw-bold text-dark text-decoration-none view-profile"
                       data-user-id="${user.user_id}" data-username="${user.username}">
                      ${user.username}
                      ${user.active 
                        ? '<span class="badge bg-success ms-2">Active</span>' 
                        : '<span class="badge bg-secondary ms-2">Inactive</span>'}
                    </a>
                    <button class="btn btn-sm btn-danger remove-friend" data-user-id="${user.user_id}">
                      Remove
                    </button>
                  `;
                  friendsList.appendChild(newFriend);

                  // Reattach modal & remove handlers
                  attachRemoveFriend(newFriend.querySelector('.remove-friend'));
                  attachProfileModalHandlers();

                  // 🔃 Sort friends list by active status
                  const allFriends = Array.from(friendsList.querySelectorAll('li'));
                  allFriends.sort((a, b) => {
                    const aActive = a.querySelector('.badge')?.classList.contains('bg-success') ? 1 : 0;
                    const bActive = b.querySelector('.badge')?.classList.contains('bg-success') ? 1 : 0;
                    return bActive - aActive;
                  });

                  friendsList.innerHTML = '';
                  allFriends.forEach(li => friendsList.appendChild(li));

                  // Refresh search list
                  searchInput.dispatchEvent(new Event('input'));
                } else {
                  addButton.textContent = 'Error';
                  addButton.classList.replace('btn-outline-primary', 'btn-danger');
                }
              } catch (err) {
                console.error('Add friend error:', err);
                addButton.textContent = 'Error';
                addButton.classList.replace('btn-outline-primary', 'btn-danger');
              }
            });
          }

          resultsBox.appendChild(li);
        });

        // Attach modal handlers for new search results
        attachProfileModalHandlers();
      } catch (error) {
        console.error('Search error:', error);
      }
    });

    // Hide dropdown if clicking outside
    document.addEventListener('click', (event) => {
      const isClickInside = searchInput.contains(event.target) || resultsBox.contains(event.target);
      if (!isClickInside) {
        resultsBox.innerHTML = '';
      }
    });
  });
</script>
    </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
{{/layout}}